/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteLayoutRouteRouteImport } from './routes/_protectedRouteLayout/route'
import { Route as AuthLayoutRouteRouteImport } from './routes/_authLayout/route'
import { Route as ProtectedRouteLayoutIndexRouteImport } from './routes/_protectedRouteLayout/index'
import { Route as AuthLayoutAuthRegistrationRouteImport } from './routes/_authLayout/auth/registration'
import { Route as AuthLayoutAuthLoginRouteImport } from './routes/_authLayout/auth/login'

const ProtectedRouteLayoutRouteRoute =
  ProtectedRouteLayoutRouteRouteImport.update({
    id: '/_protectedRouteLayout',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthLayoutRouteRoute = AuthLayoutRouteRouteImport.update({
  id: '/_authLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteLayoutIndexRoute =
  ProtectedRouteLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProtectedRouteLayoutRouteRoute,
  } as any)
const AuthLayoutAuthRegistrationRoute =
  AuthLayoutAuthRegistrationRouteImport.update({
    id: '/auth/registration',
    path: '/auth/registration',
    getParentRoute: () => AuthLayoutRouteRoute,
  } as any)
const AuthLayoutAuthLoginRoute = AuthLayoutAuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => AuthLayoutRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteLayoutRouteRouteWithChildren
  '/': typeof ProtectedRouteLayoutIndexRoute
  '/auth/login': typeof AuthLayoutAuthLoginRoute
  '/auth/registration': typeof AuthLayoutAuthRegistrationRoute
}
export interface FileRoutesByTo {
  '': typeof AuthLayoutRouteRouteWithChildren
  '/': typeof ProtectedRouteLayoutIndexRoute
  '/auth/login': typeof AuthLayoutAuthLoginRoute
  '/auth/registration': typeof AuthLayoutAuthRegistrationRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authLayout': typeof AuthLayoutRouteRouteWithChildren
  '/_protectedRouteLayout': typeof ProtectedRouteLayoutRouteRouteWithChildren
  '/_protectedRouteLayout/': typeof ProtectedRouteLayoutIndexRoute
  '/_authLayout/auth/login': typeof AuthLayoutAuthLoginRoute
  '/_authLayout/auth/registration': typeof AuthLayoutAuthRegistrationRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/auth/login' | '/auth/registration'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/auth/login' | '/auth/registration'
  id:
    | '__root__'
    | '/_authLayout'
    | '/_protectedRouteLayout'
    | '/_protectedRouteLayout/'
    | '/_authLayout/auth/login'
    | '/_authLayout/auth/registration'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthLayoutRouteRoute: typeof AuthLayoutRouteRouteWithChildren
  ProtectedRouteLayoutRouteRoute: typeof ProtectedRouteLayoutRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authLayout': {
      id: '/_authLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protectedRouteLayout': {
      id: '/_protectedRouteLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protectedRouteLayout/': {
      id: '/_protectedRouteLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedRouteLayoutIndexRouteImport
      parentRoute: typeof ProtectedRouteLayoutRouteRoute
    }
    '/_authLayout/auth/login': {
      id: '/_authLayout/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLayoutAuthLoginRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
    '/_authLayout/auth/registration': {
      id: '/_authLayout/auth/registration'
      path: '/auth/registration'
      fullPath: '/auth/registration'
      preLoaderRoute: typeof AuthLayoutAuthRegistrationRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
  }
}

interface AuthLayoutRouteRouteChildren {
  AuthLayoutAuthLoginRoute: typeof AuthLayoutAuthLoginRoute
  AuthLayoutAuthRegistrationRoute: typeof AuthLayoutAuthRegistrationRoute
}

const AuthLayoutRouteRouteChildren: AuthLayoutRouteRouteChildren = {
  AuthLayoutAuthLoginRoute: AuthLayoutAuthLoginRoute,
  AuthLayoutAuthRegistrationRoute: AuthLayoutAuthRegistrationRoute,
}

const AuthLayoutRouteRouteWithChildren = AuthLayoutRouteRoute._addFileChildren(
  AuthLayoutRouteRouteChildren,
)

interface ProtectedRouteLayoutRouteRouteChildren {
  ProtectedRouteLayoutIndexRoute: typeof ProtectedRouteLayoutIndexRoute
}

const ProtectedRouteLayoutRouteRouteChildren: ProtectedRouteLayoutRouteRouteChildren =
  {
    ProtectedRouteLayoutIndexRoute: ProtectedRouteLayoutIndexRoute,
  }

const ProtectedRouteLayoutRouteRouteWithChildren =
  ProtectedRouteLayoutRouteRoute._addFileChildren(
    ProtectedRouteLayoutRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRouteRoute: AuthLayoutRouteRouteWithChildren,
  ProtectedRouteLayoutRouteRoute: ProtectedRouteLayoutRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
